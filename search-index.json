[{"content":"Spring JDBC Template\n","date":"2023-09-07","id":0,"permalink":"/docs/why/sql-builders/","summary":"Spring JDBC Template","tags":[],"title":"SQL Builders"},{"content":"SQL Compomnents is a compile time ORM that build native JDBC Code out of Relationsal database instance. It also provides type safe SQL Builder for safer, secure and productive persdiatnce development.\n","date":"2023-09-07","id":1,"permalink":"/docs/why/","summary":"SQL Compomnents is a compile time ORM that build native JDBC Code out of Relationsal database instance. It also provides type safe SQL Builder for safer, secure and productive persdiatnce development.","tags":[],"title":"Why SQL Components"},{"content":"SQLComponents can be added as a build plugin. Also we need to add JDBC driver. for example if we need to work with postgres database we should add\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; --- \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.sqlcomponents\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;generate-sources\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;generated-sources\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.postgresql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;postgresql\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${postgresql.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/plugin\u0026gt; --- \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; ","date":"2023-09-07","id":2,"permalink":"/docs/getting-started/instalation/","summary":"SQLComponents can be added as a build plugin. Also we need to add JDBC driver. for example if we need to work with postgres database we should add","tags":[],"title":"Instalation"},{"content":"Lets connect to our database. First we need to add respective JDBC driver. for eg if we need to connect to postgres we need to add\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.postgresql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;postgresql\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${postgresql.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;\rNext, We need configure SQLComponents to connect to our database instance. we should create file named sql-components.yml with below details\n# Connection Details name: Sample url: \u0026#34;jdbc:postgresql://localhost:5432/sampledb\u0026#34; userName: \u0026#34;user\u0026#34; password: \u0026#34;password\u0026#34; schemaName: \u0026#34;sampledb\u0026#34; # Mapping Logic rootPackage: \u0026#34;com.example\u0026#34;\r","date":"2023-09-07","id":3,"permalink":"/docs/guides/manager/","summary":"Lets connect to our database. First we need to add respective JDBC driver. for eg if we need to connect to postgres we need to add","tags":[],"title":"Manager"},{"content":"Spring JDBC Template\n","date":"2023-09-07","id":4,"permalink":"/docs/why/jpa/","summary":"Spring JDBC Template","tags":[],"title":"JPA"},{"content":"","date":"2023-09-07","id":5,"permalink":"/docs/getting-started/","summary":"","tags":[],"title":"Getting Started"},{"content":"Lets connect to our database. First we need to add respective JDBC driver. for eg if we need to connect to postgres we need to add\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.postgresql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;postgresql\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${postgresql.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;\rNext, We need configure SQLComponents to connect to our database instance. we should create file named sql-components.yml with below details\n# Connection Details name: Sample url: \u0026#34;jdbc:postgresql://localhost:5432/sampledb\u0026#34; userName: \u0026#34;user\u0026#34; password: \u0026#34;password\u0026#34; schemaName: \u0026#34;sampledb\u0026#34; # Mapping Logic rootPackage: \u0026#34;com.example\u0026#34;\r","date":"2023-09-07","id":6,"permalink":"/docs/getting-started/connection/","summary":"Lets connect to our database. First we need to add respective JDBC driver. for eg if we need to connect to postgres we need to add","tags":[],"title":"Connection"},{"content":"SQLComponents can be added as a build plugin. Also we need to add JDBC driver. for example if we need to work with postgres database we should add\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; --- \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.sqlcomponents\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;generate-sources\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;generated-sources\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.postgresql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;postgresql\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${postgresql.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/plugin\u0026gt; --- \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; ","date":"2023-09-07","id":7,"permalink":"/docs/guides/model/","summary":"SQLComponents can be added as a build plugin. Also we need to add JDBC driver. for example if we need to work with postgres database we should add","tags":[],"title":"Model"},{"content":"Comparison with JOOQ Framework What is JOOQ? JOOQ (Java Object Oriented Querying) is a powerful and widely used Java framework for building type-safe SQL queries. JOOQ’s goal is to bridge the gap between Java and SQL by generating Java code from a database schema, allowing developers to work with SQL in a type-safe manner.\nJOOQ comes with a lot of built-in features, including:\nAutomatic query generation from database schema Type-safe SQL queries Support for various SQL dialects (e.g., MySQL, PostgreSQL, Oracle) Integration with ORMs, such as Hibernate Key Differences While JOOQ is a mature framework with many features, sqlComponents provides a simpler alternative that supports multiple RDBMS databases without needing a custom DSL. Here’s a comparison between both:\nFeature JOOQ sqlComponents Query Execution Uses a custom DSL for query generation Leverages Java’s native library for SQL execution Database Support Supports multiple SQL dialects (MySQL, PostgreSQL, etc.) Supports all RDBMS databases (MySQL, PostgreSQL, Oracle, SQL Server, etc.) Complexity Requires knowledge of JOOQ DSL and database schema generation Simple and direct, using raw SQL queries Type-Safe Queries Strongly typed SQL queries with Java integration No type-safe queries, focuses on flexibility Abstraction High level of abstraction with Java code representing SQL Minimal abstraction; SQL queries are passed as strings Dependency Size Larger library with various modules Lightweight and minimal dependencies Learning Curve Steeper learning curve due to JOOQ’s DSL Easy to learn with direct SQL and Java interaction Customization Highly customizable with various SQL dialects and ORMs Focused on simplicity without deep customizations Advantages of JOOQ Type-Safe Queries: JOOQ provides compile-time safety for SQL queries by generating Java code from the database schema, minimizing SQL syntax errors. SQL Dialect Support: It supports multiple SQL dialects, making it versatile for working with different types of databases. Rich Feature Set: It comes with a variety of features like transaction management, query optimization, and integration with ORMs like Hibernate. Generated Code: JOOQ automatically generates Java classes based on your database schema, saving time and effort in building SQL queries manually. Disadvantages of JOOQ Steep Learning Curve: The DSL used in JOOQ can be challenging for developers unfamiliar with its syntax and conventions. Heavier Dependency: Due to its extensive feature set, JOOQ can introduce a significant amount of dependencies and complexity into projects. Overhead for Simple Queries: For simple use cases, JOOQ can feel like overkill, adding unnecessary abstraction and overhead. Customization Complexity: While JOOQ is customizable, the complexity of implementing advanced queries may increase development time. Advantages of sqlComponents Simplicity: It allows you to write SQL queries directly in Java without the need to learn or use a new query-building DSL. Lightweight: With minimal dependencies, sqlComponents focuses on performance and simplicity. Native Java Integration: Since it uses native Java libraries, developers familiar with JDBC will find it intuitive to work with. Minimal Abstraction: There\u0026rsquo;s no complex framework to manage; the library is focused on executing raw SQL queries effectively. Multi-Database Support: sqlComponents is compatible with all major RDBMS databases, including MySQL, PostgreSQL, Oracle, SQL Server, and more. This allows developers to use the library in various database environments without needing separate tools for each database. Disadvantages of sqlComponents Lack of Type Safety: Unlike JOOQ, queries are not type-safe, which increases the risk of runtime SQL syntax errors. Manual Query Writing: Developers need to write raw SQL, which may introduce human error and inefficiency in complex queries. Manual Mapping: Unlike JOOQ, you have to manually map database result sets to Java objects, which could be tedious for large datasets. No Query Generation: There is no automatic query generation based on database schema, making it more suitable for developers who prefer manual control over their SQL queries. Conclusion Both sqlComponents and JOOQ offer unique advantages for Java developers working with databases. If you\u0026rsquo;re looking for a robust framework with type-safe SQL queries, strong integration with various databases, and you\u0026rsquo;re willing to handle the complexity, JOOQ might be the right choice. However, if you need a lightweight, fast, and easy-to-use library that supports all RDBMS databases and allows you to work directly with SQL queries using native Java libraries, sqlComponents is a better fit.\nThis flexibility makes sqlComponents a great choice for developers who prefer writing SQL queries manually while maintaining compatibility across different RDBMS environments without relying on heavy frameworks.\n","date":"2023-09-07","id":8,"permalink":"/docs/why/jooq/","summary":"Comparison with JOOQ Framework What is JOOQ? JOOQ (Java Object Oriented Querying) is a powerful and widely used Java framework for building type-safe SQL queries.","tags":[],"title":"Jooq"},{"content":"API Guide\n","date":"2023-09-07","id":9,"permalink":"/docs/guides/","summary":"API Guide","tags":[],"title":"API Guide"},{"content":"SQLComponents can be added as a build plugin. Also we need to add JDBC driver. for example if we need to work with postgres database we should add\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; --- \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.sqlcomponents\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;generate-sources\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;generated-sources\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.postgresql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;postgresql\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${postgresql.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/plugin\u0026gt; --- \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; ","date":"2023-09-07","id":10,"permalink":"/docs/guides/store/","summary":"SQLComponents can be added as a build plugin. Also we need to add JDBC driver. for example if we need to work with postgres database we should add","tags":[],"title":"Store"},{"content":"","date":"2023-09-07","id":11,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"Support for Oracle and SQL Server: Expand the framework\u0026rsquo;s compatibility to include Oracle and SQL Server, enabling seamless integration with a broader range of database systems. Custom Code Generation: Implement custom code generation features to automate and standardize repetitive coding tasks, enhancing productivity and reducing manual errors. Geo Location Datatypes Support: Introduce support for geo-location data types, allowing the handling and processing of spatial data directly within the framework. Transaction Support: Integrate transaction support to ensure data consistency and reliability during complex operations by managing and safeguarding multiple changes within a single transaction. ","date":"2023-09-07","id":12,"permalink":"/docs/roadmap/","summary":"Support for Oracle and SQL Server: Expand the framework\u0026rsquo;s compatibility to include Oracle and SQL Server, enabling seamless integration with a broader range of database systems.","tags":[],"title":"Roadmap"},{"content":"Over the past two decades, the way we access relational databases from Java has evolved significantly. Starting with JDBC programming, we moved on to using SQL mappers and later adopted full-fledged ORM frameworks. However, modern architectures, such as cloud-native, microservices, and serverless, present new challenges that traditional persistence technologies may not fully address.\nIn this presentation, we will explore the history, theory, and technology behind the evolution of persistence technologies for Java applications. We will discuss the challenges posed by modern architectures and how cloud-native persistent technology can solve them. Join us to learn about the future of Java persistence and how you can prepare for it.\n","date":"2023-09-07","id":13,"permalink":"/blog/the-future-of-java-persistence/","summary":"we will explore the history, theory, and technology behind the evolution of persistence technologies for Java applications.","tags":[],"title":"The Future of Java Persistence"},{"content":"","date":"2023-09-07","id":14,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\nFurther reading Read about reference in the Diátaxis framework ","date":"2023-09-07","id":15,"permalink":"/docs/reference/example-reference/","summary":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.","tags":[],"title":"Example Reference"},{"content":"","date":"2023-09-07","id":16,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":17,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":18,"permalink":"/","summary":"","tags":[],"title":"Welcome to SQL Components"},{"content":"","date":"0001-01-01","id":19,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":20,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":21,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]