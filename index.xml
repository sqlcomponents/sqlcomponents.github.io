<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome to SQL Components on My Docs</title><link>/</link><description>Recent content in Welcome to SQL Components on My Docs</description><generator>Hugo</generator><language>en</language><copyright>Copyright (c) 2020-2024 Thulite</copyright><lastBuildDate>Thu, 07 Sep 2023 16:27:22 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL Builders</title><link>/docs/why/sql-builders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/why/sql-builders/</guid><description>&lt;p>&lt;strong>SQL Builders&lt;/strong> are tools designed to simplify database interaction by abstracting away complex SQL queries and connection management. They help developers focus on writing business logic rather than managing database connections and handling raw SQL queries. Popular SQL Builders like &lt;strong>Spring JDBC&lt;/strong> and &lt;strong>QueryDSL&lt;/strong> allow developers to construct SQL queries programmatically, making code more readable and maintainable.&lt;/p></description></item><item><title>JPA</title><link>/docs/why/jpa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/why/jpa/</guid><description>&lt;p>&lt;strong>Java Persistence API (JPA)&lt;/strong> is a well-known framework that abstracts most of the database interaction for Java applications by utilizing &lt;strong>Object-Relational Mapping (ORM)&lt;/strong>. JPA handles both &lt;strong>connection management&lt;/strong> and &lt;strong>DAO implementation&lt;/strong>, leaving the developer to focus on defining &lt;strong>model classes&lt;/strong> and mapping them to database tables.&lt;/p></description></item><item><title>Jooq</title><link>/docs/why/jooq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/why/jooq/</guid><description>&lt;p>&lt;strong>JOOQ&lt;/strong> (Java Object Oriented Querying) is a powerful and widely-used Java framework for building type-safe SQL queries. JOOQâ€™s primary goal is to seamlessly integrate SQL into Java code by generating Java classes from a database schema, enabling developers to work with SQL in a type-safe, programmatic way.&lt;/p></description></item><item><title>Installation</title><link>/docs/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/installation/</guid><description>&lt;p>In order to generate the code at compiletime, SQLComponents has to be added as a build plugin ( under &lt;code>build &amp;gt; plugins&lt;/code> in &lt;code>pom.xml&lt;/code> ) along with the corresposing JDBC driver.&lt;/p></description></item><item><title>Connection</title><link>/docs/getting-started/connection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/connection/</guid><description>&lt;p>We need configure SQLComponents to connect to the database instance. we should create a file named &lt;code>sql-components.yml&lt;/code> as given below&lt;/p></description></item><item><title>Core Components</title><link>/docs/guides/core-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guides/core-components/</guid><description>&lt;p>Lets connect to our database. First we need to add respective JDBC driver. for eg if we need to connect to postgres we need to add&lt;/p></description></item><item><title>The Future of Java Persistence</title><link>/blog/the-future-of-java-persistence/</link><pubDate>Thu, 07 Sep 2023 16:27:22 +0200</pubDate><guid>/blog/the-future-of-java-persistence/</guid><description>we will explore the history, theory, and technology behind the evolution of persistence technologies for Java applications.</description></item><item><title>Privacy Policy</title><link>/privacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/privacy/</guid><description>&lt;p>Hello Privacy&lt;/p></description></item></channel></rss>